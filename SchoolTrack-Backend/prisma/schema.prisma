// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// npx prisma migrate dev --name init

model Person {
  id               Int           @id @default(autoincrement())
  name             String        @db.VarChar(255)
  birthdate        DateTime
  rg               String        @db.VarChar(9)
  cpf              String        @db.VarChar(11)
  residencialPhone String        @db.VarChar(11)
  personalPhone    String        @db.VarChar(11)
  address          Address       @relation(fields: [addressId], references: [id])
  addressId        Int           @unique
  Employee         Employee[]
  Child            Child[]
  Responsible      Responsible[]
}

model Employee {
  id            Int      @id @default(autoincrement())
  email         String   @db.VarChar(255)
  admissionDate DateTime
  checkInTime   DateTime @db.Time
  checkOutTime  DateTime @db.Time
  position      String   @db.VarChar(255)
  salary        Float
  person        Person   @relation(fields: [personId], references: [id])
  cnh           CNH      @relation(fields: [cnhId], references: [id])
  personId      Int
  cnhId         Int
  Van           Van[]
}

model Child {
  id             Int              @id @default(autoincrement())
  email          String           @db.VarChar(255)
  person         Person           @relation(fields: [personId], references: [id])
  responsible    Responsible      @relation(fields: [responsibleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  address        Address          @relation(fields: [addressId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  school         School           @relation(fields: [schoolId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  personId       Int
  responsibleId  Int
  addressId      Int
  schoolId       Int
  Route          Route[]
  MonthlyPayment MonthlyPayment[]
}

model Responsible {
  id             Int              @id @default(autoincrement())
  email          String           @db.VarChar(255)
  person         Person           @relation(fields: [personId], references: [id])
  personId       Int
  Child          Child[]
  MonthlyPayment MonthlyPayment[]
}

model Address {
  id           Int      @id @default(autoincrement())
  street       String   @db.VarChar(255)
  number       Int
  neighborhood String   @db.VarChar(255)
  city         String   @db.VarChar(255)
  state        String   @db.VarChar(255)
  person       Person?
  Child        Child[]
  School       School[]
}

model CNH {
  id            Int        @id @default(autoincrement())
  register      String     @db.VarChar(255)
  expireDate    DateTime
  firstDocument DateTime
  category      String     @db.VarChar(255)
  Employee      Employee[]
}

model Van {
  id          Int      @id @default(autoincrement())
  brand       String   @db.VarChar(255)
  model       String   @db.VarChar(255)
  plate       String   @db.VarChar(255)
  year        Int
  capacity    Int
  exitTime    DateTime @db.Time
  deliverTime DateTime @db.Time
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  school      School   @relation(fields: [schoolId], references: [id])
  employeeId  Int
  schoolId    Int
  Route       Route[]
}

model School {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(255)
  address   Address @relation(fields: [addressId], references: [id])
  addressId Int
  Child     Child[]
  Van       Van[]
}

model Route {
  id      Int   @id @default(autoincrement())
  child   Child @relation(fields: [childId], references: [id])
  van     Van   @relation(fields: [vanId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childId Int
  vanId   Int
}

model MonthlyPayment {
  id            Int         @id @default(autoincrement())
  value         Float
  paymentDate   DateTime
  child         Child       @relation(fields: [childId], references: [id])
  responsible   Responsible @relation(fields: [responsibleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childId       Int
  responsibleId Int
}
